;
(function ($, window, document, undefined) {
    /**
     * Crossword (Base)
     *
     */

    function Crossword(container, options) {
        var defaults = {
            id: 0,
            data: [],
            puzzleContainer: "#puzzle",
            clueContainer: "#clue",
            storageName: null
        };
        var settings = $.extend({}, defaults, options);

        this.container = container;
        this.id = settings.id;
        this.data = settings.data;
        this.puzzleContainer = settings.puzzleContainer;
        this.cluesContainer = settings.clueContainer;
        this.storageName = settings.storageName;

        // special keys
        this.BACKSPACE = 8;
        this.DELETE = 46;
        this.LEFT = 37;
        this.RIGHT = 39;
        this.UP = 38;
        this.DOWN = 40;
        this.TAB = 9;
        this.SPACE = 32;
        this.ENTER = 13;
        this.SHIFT = 16;

        // is event caught?
        this.eventStatus = 'free';

        // is crossword completly solved?
        this.isFinished = false;

        this.init(); 
    }

    Crossword.prototype = {
        init: function () {

            // build grid
            this.grid = new Grid(this.data, this.puzzleContainer);

            // write clues
            this.clue = new Clue(this.data, this.cluesContainer);

            // navigation
            this.navigation = new Navigation(this.grid.letters, this.clue, this.container, this.isMobile());

            // storage
            this.storage = new Storage(this.storageName);

            // timer
            this.timer = new Timer(this.storage);

            // user
            this.user = new User();

            // listen events
            this.listen();

            this.postResultData();

            var isAuthenticated = HTGlobal.Cookie.get('MID');
            if (isAuthenticated) {
                $('.onlyGuest').hide();
            }

            // start modal

            if (HTGlobal.Auth.isAuthenticated()) {
                $('.cw-modal-message h3').hide();
            }
            $('.cw-outer.locked').attr("style", "display:inherit;");
            if (this.isFinished) {
                this.finish();
            } else {
                $('#startModal').css({ 
                    "display": "flex",
                    "display": "-webkit-flex",
                });
            }
        },

        listen: function () {
            var crossword = this;
            if (this.isMobile()) {
                $('input', crossword.container).on('touchend', function () {
                    if (event instanceof TouchEvent && event.timeStamp) {
                        crossword.navigation.click(event.target);
                    }
                });
            } else {
                $('input', crossword.container).on('click', function (evt) {
                    if (evt.originalEvent instanceof MouseEvent && evt.originalEvent.timeStamp) {
                        crossword.navigation.click(this);
                    }
                });
            }

            $('input', crossword.container).on('keydown', function (evt) {
                // event free at first
                crossword.eventStatus = 'free';
                switch (evt.which) {
                    case crossword.BACKSPACE:
                    case crossword.DELETE:
                        crossword.eventStatus = 'caught';
                        if (!this.value) {
                            crossword.navigation.prev(this);
                        } else {
                            this.value = '';
                        }
                        crossword.checkAnswer(false);
                        break;
                    case crossword.ENTER:
                        crossword.eventStatus = 'caught';
                        crossword.navigation.next(this);
                        break;
                    case crossword.TAB:
                        crossword.eventStatus = 'caught';
                        evt.preventDefault();
                        var direction = 'next';
                        if (typeof evt.shiftKey !== 'undefined' && evt.shiftKey) {
                            direction = 'prev';
                        }
                        crossword.navigation.tab(this, direction);
                        break;
                    case crossword.LEFT:
                        crossword.eventStatus = 'caught';
                        crossword.navigation.left(this);
                        break;
                    case crossword.RIGHT:
                        crossword.eventStatus = 'caught';
                        crossword.navigation.right(this);
                        break;
                    case crossword.UP:
                        crossword.eventStatus = 'caught';
                        crossword.navigation.up(this);
                        break;
                    case crossword.DOWN:
                        crossword.eventStatus = 'caught';
                        crossword.navigation.down(this);
                        break;
                    case crossword.SHIFT:
                        crossword.eventStatus = 'caught';
                        break;
                    default:
                        this.value = '';
                        break;
                }
            });
            $('input', crossword.container).on('input propertychange', function () {
                if (this.value.length > 1) {
                    this.value = this.value.substr(this.value.length - 1);
                }
                if (crossword.eventStatus == 'free') {
                    crossword.navigation.next(this);
                }
                // storage event
                crossword.storage.set(this.dataset.y + ',' + this.dataset.x, this.value);

                // check answer
                crossword.checkAnswer(false);
            });
            $('.clues li', crossword.container).on('li click', function () {
                crossword.navigation.jump(this.dataset.orientation, this.dataset.position);
            });

            // timer events
            $('.cw-timer .cw-pause-icon').on('click', function () {
                crossword.timer.pause();
                $('#resumeModal').css("display", "flex");
            });
            $('.cw-modal-button').on('click', function () {
                switch (this.dataset.action) {
                    case "start":
                        // start
                        crossword.timer.start();
                        $('#startModal').hide();
                        if (typeof dataLayer !== 'undefined') {
                            dataLayer.push({
                                'event': 'GAEvent',
                                'eventCategory': 'HT Bulmaca',
                                'eventAction': 'Crossword start',
                                'crosswordId': crossword.id,
                                'eventLabel': 'Haberturk/Bulmaca',
                                'isNewsDetail': false,
                            });
                        }
                        break;
                    case "resume":
                        // resume
                        crossword.timer.start();
                        $('#resumeModal').hide();
                        break;
                }
            });
            $('.cw-form-container .submit-button').on('click', function () {
                crossword.saveForm();
            });

            // check answer
            crossword.checkAnswer(true);
        },
        checkAnswer: function (init) {
            var crossword = this,
                isFinished = true,
                answer;

            $.each(this.clue.across, function (position, data) {
                answer = '';
                $('td[data-xclue="' + position + '"] input', this.container).each(function (i, input)  {
                    answer += input.value;
                });

                if (answer.toLocaleUpperCase('tr-TR') == crossword.clue.answer('across', position).toUpperCase()) {
                    $('td[data-xclue="' + position + '"]', this.container).addClass('across-correct');
                } else {
                    $('td[data-xclue="' + position + '"]', this.container).removeClass('across-correct');
                    isFinished = false;
                }
            });
            $.each(this.clue.down, function (position, data) {
                answer = '';
                $('td[data-yclue="' + position + '"] input', this.container).each(function (i, input)  {
                    answer += input.value;
                });
                if (answer.toLocaleUpperCase('tr-TR') == crossword.clue.answer('down', position).toUpperCase()) {
                    $('td[data-yclue="' + position + '"]', this.container).addClass('down-correct');
                } else {
                    $('td[data-yclue="' + position + '"]', this.container).removeClass('down-correct');
                    isFinished = false;
                }
            });

            if (isFinished && init == false) {
                this.finish();
            }

            this.isFinished = isFinished;
            
        },
        finish: function () {
            $('.cw-hour-template').html(this.timer.template());
            if (this.user.get()) {
                $('.cw-form-container').hide();
            }
            $('.cw-modal-form').css("display", "flex");
            if (typeof dataLayer !== 'undefined') {
                dataLayer.push({
                    'event': 'GAEvent',
                    'eventCategory': 'HT Bulmaca',
                    'eventAction': 'Crossword finished',
                    'crosswordId': this.id,
                    'eventLabel': 'Haberturk/Bulmaca',
                    'isNewsDetail': false,
                });
            }
        },
        postResultData: function () {

            var userID = HTGlobal.Cookie.get('MID');
            if (userID != undefined) {
                id = this.id;
                solvetime = this.timer.get();
                var data = JSON.parse(localStorage.getItem("postThiscrossword"));
                if (data && data.hasOwnProperty("id")) {
                    id = data.id;
                    solvetime = data.time;

                    $.ajax({
                        type: "POST",
                        url: "/bulmaca/bulmacapost",
                        data: {
                            quizType: "Bulmaca",
                            quizId: this.id,
                            solveTime: solvetime,
                            answers: this.user.get(),
                            userID: userID,
                        },
                        success: function () {
                            localStorage.removeItem("postThiscrossword");
                        }
                    });
                }
            }

        },
        isMobile: function () {
            var check = false;
            (function (a) {
                if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                    check = true;
            })(navigator.userAgent || navigator.vendor || window.opera);
            return check;
        },
        saveForm: function () {
            var $container = $('.cw-form-container form.form'), failInputs = [];
            /*

            $container.find('input').attr('style', '');
            $container.find('input').each(function (key, input) {
                if (input.value.length == 0) {
                    failInputs.push(input);
                }
            });

            if (failInputs.length > 0) {
                for (var i = 0; i < failInputs.length; i++) {
                    failInputs[i].style.borderColor = "red";
                }
                
                return false;
            }

            
            */
            $('.cw-form-container').hide();
            this.user.set($container.find('input[name="name"]').val());
            datas = {id: this.id, time: this.timer.get()};
            localStorage.setItem("postThiscrossword", JSON.stringify(datas));
            userID = HTGlobal.Cookie.get('MID');

            if (userID == undefined) {
                authWidget.show();
            } else {
                this.postResultData();
            }

        }
    };

    /**
     * Grid
     *
     */

    function Grid(data, container) {
        this.data = data;
        this.container = container;

        this.xLength = 0;
        this.yLength = 0;
        this.letters = {};

        this.table();
    }

    Grid.prototype = {
        table: function () {
            // class
            var grid = this;

            // set letters cords and max x,y
            $.each(this.data, function (i, row) {
                if (row.orientation == 'across') {
                    var xLength = (row.startx - 1) + row.answer.length;
                    if (grid.xLength < xLength) {
                        grid.xLength = xLength;
                    }
                    for (var x = 0; x < row.answer.length; x++) {
                        var _key = row.starty + ',' + (row.startx + x);
                        if (grid.letters.hasOwnProperty(_key)) {
                            grid.letters[_key]['XCLUE'] = row.position;
                            grid.letters[_key]['XINDEX'] = x;
                        } else {
                            grid.letters[_key] = {
                                LETTER: row.answer[x],
                                XCLUE: row.position,
                                XINDEX: x,
                                INPUT: null
                            };
                        }
                    }
                } else if (row.orientation == 'down') {
                    var yLength = (row.starty - 1) + row.answer.length;
                    if (grid.yLength < yLength) {
                        grid.yLength = yLength;
                    }
                    for (var y = 0; y < row.answer.length; y++) {
                        var _key = (row.starty + y) + ',' + row.startx;
                        if (grid.letters.hasOwnProperty(_key)) {
                            grid.letters[_key]['YCLUE'] = row.position;
                            grid.letters[_key]['YINDEX'] = y;
                        } else {
                            grid.letters[_key] = {
                                LETTER: row.answer[y],
                                YCLUE: row.position,
                                YINDEX: y,
                                INPUT: null
                            };
                        }
                    }
                } else {
                    throw new Error('Invalid orientation');
                }
            });
            // create table
            var $table = $('<table>');
            for (var y = 1; y <= grid.yLength; y++) {
                var $tr = $('<tr>');
                for (var x = 1; x <= grid.xLength; x++) {
                    var $td = $('<td>'),
                            letter = grid.letters[y + ',' + x];
                    if (typeof letter !== 'undefined') {
                        if (letter.XINDEX == 0) {
                            $('<span>' + letter.XCLUE + '</span>').appendTo($td);
                        } else if (letter.YINDEX == 0) {
                            $('<span>' + letter.YCLUE + '</span>').appendTo($td);
                        }
                        $td.attr('data-xclue', letter.XCLUE);
                        $td.attr('data-xindex', letter.XINDEX);
                        $td.attr('data-yindex', letter.YINDEX);
                        $td.attr('data-yclue', letter.YCLUE);
                        $('<input type="text" maxlength="1" data-x="' + x + '" data-y="' + y + '" />').appendTo($td);
                    } else {
                        $('<div class="block"></div>').appendTo($td);
                    }
                    $td.appendTo($tr);
                }
                $tr.appendTo($table);
            }

            // append table to container
            $table.appendTo(grid.container);

            // append tooltip element
            // $('<div class="crossword-tooltip"></div>').appendTo(this.container).hide();
        }
    };

    /**
     * Clues
     *
     */

    function Clue(data, container) {
        this.data = data;
        this.container = container;
        this.across = {};
        this.down = {};

        this.init();
        this.write();
    }

    Clue.prototype = {
        init: function () {
            var acrossNext, acrossPrev,
                    downNext, downPrev;

            for (var i = 0; i < this.data.length; i++) {
                var row = this.data[i],
                        position = row.position,
                        orientation = row.orientation;

                this[orientation][position] = {
                    text: row.clue,
                    answer: row.answer,
                    next: 0,
                    prev: 0
                };

                if (typeof this.data[i - 1] !== 'undefined' && this.data[i - 1].orientation == orientation) {
                    this[orientation][position]['prev'] = this.data[i - 1].position;
                }
                if (typeof this.data[i + 1] !== 'undefined' && this.data[i + 1].orientation == orientation) {
                    this[orientation][position]['next'] = this.data[i + 1].position;
                }
            }
        },
        write: function () {
            var $clues = $('<div class="clues"></div>'),
                    $across = $('<div class="across" data-across><h3>Soldan Sağa</h3></div>'),
                    $acrossUL = $('<ul/>'),
                    $down = $('<div class="down" data-down><h3>Yukarıdan Aşağıya</h3></div>'),
                    $downUL = $('<ul/>');
            $.each(this.across, function (i, clue) {
                $('<li data-position="' + i + '" data-orientation="across"><span class="cw-clue-count">' + i + '</span>' + '<span class="cw-clue-text">' + clue.text + '</span>' + '</li>').appendTo($acrossUL);
            });
            $acrossUL.appendTo($across);
            $across.appendTo($clues);

            $.each(this.down, function (i, clue) {
                $('<li data-position="' + i + '" data-orientation="down"><span class="cw-clue-count">' + i + '</span>' + '<span class="cw-clue-text">' + clue.text + '</span>' + '</li>').appendTo($downUL);
            });
            $downUL.appendTo($down);
            $down.appendTo($clues);

            $clues.appendTo(this.container);
        },
        get: function (orientation, position) {
            return this[orientation][position].text;
        },
        answer: function (orientation, position) {
            return this[orientation][position].answer;
        }
    };

    /**
     * Navigation
     *
     */

    function Navigation(letters, clue, container, mobile) {
        this.letters = letters;
        this.clue = clue;
        this.container = container;
        this.isMobile = mobile;

        this.orientation = 'across';
        this.activePosition = 0;
        this.clickedInput = null;
        this.tooltipstered = null;
    }

    Navigation.prototype = {
        next: function (input) {
            if (this.orientation == 'across') {
                $(input).parent().next().children('input').focus().select();
            } else {
                var $parent = $(input).parent(),
                        index = $parent.index();
                $parent.parent().next().children('td').eq(index).children('input').focus().select();
            }
        },
        prev: function (input) {
            if (this.orientation == 'across') {
                $(input).parent().prev().children('input').focus().select();
            } else {
                var $parent = $(input).parent(),
                        index = $parent.index();
                $parent.parent().prev().children('td').eq(index).children('input').focus().select();
            }
        },
        left: function (input) {
            if (this.__get(input.dataset.y, parseInt(input.dataset.x) - 1)) {
                this.orientation = 'across';
                this.prev(input);
                this.highlight();
            }
        },
        right: function (input) {
            if (this.__get(input.dataset.y, parseInt(input.dataset.x) + 1)) {
                this.orientation = 'across';
                this.next(input);
                this.highlight();
            }
        },
        up: function (input) {
            if (this.__get(parseInt(input.dataset.y) - 1, input.dataset.x)) {
                this.orientation = 'down';
                this.prev(input);
                this.highlight();
            }
        },
        down: function (input) {
            if (this.__get(parseInt(input.dataset.y) + 1, input.dataset.x)) {
                this.orientation = 'down';
                this.next(input);
                this.highlight();
            }
        },
        tab: function (input, direction) {
            var letter = this.__get(input.dataset.y, input.dataset.x);
            if (this.orientation == 'across') {
                var clue = this.clue.across[letter.XCLUE];

                if (clue[direction]) {
                    this.jump('across', clue[direction]);
                } else {
                    this.jump('down', 'first');
                }
            } else {
                var clue = this.clue.down[letter.YCLUE];
                if (clue[direction]) {
                    this.jump('down', clue[direction]);
                } else {
                    this.jump('across', 'first');
                }
            }
            this.highlight();
        },
        jump: function (orientation, position) {
            var $selected;
            if (orientation == 'across') {
                if (position == 'first') {
                    $selected = $('td[data-xindex="0"]', this.container).eq(0);
                } else {
                    $selected = $('td[data-xclue="' + position + '"][data-xindex="0"]', this.container);
                }
                this.orientation = 'across';
            } else {
                if (position == 'first') {
                    $selected = $('td[data-yindex="0"]', this.container).eq(0);
                } else {
                    $selected = $('td[data-yclue="' + position + '"][data-yindex="0"]', this.container);
                }
                this.orientation = 'down';
            }
            if ($selected.length > 0) {
                $selected.children('input').focus().select();
                this.highlight();
            }
        },
        click: function (input) {
            var letter = this.__get(input.dataset.y, input.dataset.x),
                    caughtEvent = false;

            if (this.clickedInput == input) {
                if (this.orientation == 'down' && typeof letter['XCLUE'] != 'undefined') {
                    this.orientation = 'across';
                    caughtEvent = true;
                } else if (this.orientation == 'across' && typeof letter['YCLUE'] != 'undefined') {
                    this.orientation = 'down';
                    caughtEvent = true;
                }
            }

            if (caughtEvent == false) {
                if (typeof letter['XCLUE'] == 'undefined') {
                    this.orientation = 'down';
                } else if (typeof letter['YCLUE'] == 'undefined') {
                    this.orientation = 'across';
                }
            }
            $(input).focus();
            this.clickedInput = input;
            this.highlight(input);
        },
        highlight: function (inp) {
            $('td', this.container).removeClass('active');
            $('.clues li.active', this.container).removeClass('active');
            var input = inp || $(':focus', this.container);
            if (typeof input[0] !== 'undefined') {
                input = input[0];
            }
            var letter = this.__get(input.dataset.y, input.dataset.x);

            if (this.orientation == 'across') {
                this.activePosition = letter.XCLUE;
                $('td[data-xclue="' + this.activePosition + '"]', this.container).addClass('active');
            } else {
                this.activePosition = letter.YCLUE;
                $('td[data-yclue="' + this.activePosition + '"]', this.container).addClass('active');
            }

            $('.clues li[data-orientation="' + this.orientation + '"][data-position="' + this.activePosition + '"]', this.container)
                    .addClass('active');

            if (!this.isMobile) {
                $('.cw-header .cw-title h3').text(this.clue[this.orientation][this.activePosition].text);
            }
            this.tooltip();
        },
        tooltip: function () {
            if (this.isMobile) {
                if (this.tooltipstered) {
                    $('td.tooltipstered').tooltipster('destroy');
                }
                $('.tooltipster-base').remove();
                var $activeInput = $('td.active:eq(0)', this.container);

                this.tooltipstered = $activeInput.tooltipster({
                    'side': ['top'],
                    'content': this.clue.get(this.orientation, this.activePosition),
                    'trigger': 'custom'
                }).tooltipster('open');
            }
        },
        __get: function (y, x) {
            if (typeof this.letters[y + ',' + x] !== 'undefined') {
                return this.letters[y + ',' + x];
            }
            return false;
        }
    };

    /**
     * User Object
     *
     */

    function User() {
        this.storage = localStorage;
        this.data = {};

        this.init();
    }


    User.prototype = {
        init: function () {
            this.data = this.get();
        },
        set: function (name, email) {
            this.data = {
                name: name,
                email: email
            };
            this.storage.setItem("crossword-user", JSON.stringify(this.data));
        },
        get: function () {
            return JSON.parse(this.storage.getItem("crossword-user"));
        }
    };

    /**
     * Timer Interval
     *
     */

    function Timer(storage) {
        this.storage = storage;
        this.status = 'pause';
        this.prefix = "time";
        this.time = 0;

        // init timer
        this.init();
    }

    Timer.prototype = {
        init: function () {
            var that = this;
            this.time = this.get() || 0;
            window.setInterval(function () {
                if (that.status == 'ready') {
                    that.set(that.time++);
                    that.print(document.getElementById('timer'));
                }
            }, 1000);
        },
        set: function (time) {
            this.storage.set(this.prefix, time);
        },
        get: function () {
            return this.storage.get(this.prefix);
        },
        start: function () {
            this.status = 'ready';
            $('.cw-outer.locked').removeClass('locked');
        },
        stop: function () {
            this.time = 0;
            this.status = 'stop';
        },
        pause: function () {
            this.status = 'pause';
            $('.cw-outer').addClass('locked');
        },
        print: function (element) {
            element.innerHTML = this.hour(this.time);
        },
        hour: function (d) {
            d = Number(d);
            var m = Math.floor(d / 60);
            var s = Math.floor(d % 3600 % 60);
            return "<span class='min'>" + m + "</span>" + "<span class='sec'>" + ('0' + s).slice(-2) + "</span>";
        },
        template: function () {
            var hour = Number(this.time);
            var h = Math.floor(hour / 3600);
            var m = Math.floor(hour % 3600 / 60);
            var s = Math.floor(hour % 3600 % 60);

            var template = '';
            if (h) {
                template += '<strong>' + h + '<span> saat</span></strong> ';
            }
            if (m) {
                template += '<strong>' + m + '<span> dakika</span></strong> ';
            }
            template += '<strong>' + s + '<span> saniyede</span></strong> ';

            return template;
        }
    }

    /**
     * Storage
     *
     */


    function Storage(name) {
        this.name = name;
        this.pool = {};
        this.init();
    }

    Storage.prototype = {
        init: function () {
            var storage = this,
                    history = this.gets();

            if (history) {
                $.each(history, function (index, value) {
                    var key = index;
                    if (index.search(',') > -1) {
                        var cords = index.split(','),
                                key = cords[0] + ',' + cords[1];
                    }
                    storage.pool[key] = value;
                });
            }
            this.fill();
        },
        set: function (key, value) {
            this.pool[key] = value;
            localStorage.setItem(this.name, JSON.stringify(this.pool));
        },
        get: function (key) {
            var data = JSON.parse(localStorage.getItem(this.name));
            if (data && data.hasOwnProperty(key)) {
                return data[key];
            }
            return null;
        },
        gets: function () {
            return JSON.parse(localStorage.getItem(this.name));
        },
        remove: function () {
            localStorage.removeItem(this.name);
        },
        fill: function () {
            var history = this.gets();
            if (history) {
                $.each(history, function (index, value) {
                    if (index.search(',') > -1) {
                        var cords = index.split(',');
                        $('input[data-y="' + cords[0] + '"][data-x="' + cords[1] + '"]').val(value);
                    }
                });
            }
        }
    };

    $.fn['crossword'] = function (options) {
        if (options.data.length < 1) {
            throw new Error('Invalid data');
        }
        return this.each(function () {
            if (!$.data(this, "plugin_crossword")) {
                //window.crossword = new Crossword(this, options);
                $.data(this, "plugin_crossword", new Crossword(this, options));
            }
        });
    };

})(jQuery, window, document);